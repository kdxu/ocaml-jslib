# 1 "lexer.mll"
 
  open Parser5
  open Ast

  let start_pos lexbuf = lexbuf.Lexing.lex_start_p

  let int_of_hex_char c =
    if c >= '0' && c <= '9'
    then Char.code c - Char.code '0'
    else if c >= 'a' && c <= 'f'
    then Char.code c - Char.code 'a'
    else if c >= 'A' && c <= 'F'
    then Char.code c - Char.code 'A'
    else raise (Invalid_argument "invalid hex digit")

# 18 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\196\255\197\255\198\255\201\255\204\255\205\255\206\255\
    \003\000\035\000\089\000\067\000\070\000\071\000\072\000\090\000\
    \091\000\075\000\076\000\242\255\243\255\090\000\245\255\246\255\
    \247\255\248\255\249\255\250\255\113\000\209\000\040\001\111\000\
    \004\000\145\000\232\255\011\000\253\255\115\001\152\001\239\001\
    \125\001\070\002\141\001\150\002\059\002\160\002\170\002\192\002\
    \202\002\212\002\087\000\241\255\094\000\240\255\235\255\237\255\
    \234\255\236\255\233\255\231\255\224\255\110\000\230\255\223\255\
    \112\000\114\000\229\255\228\255\212\255\227\255\211\255\226\255\
    \225\255\134\000\254\255\157\000\255\255\210\000\253\255\254\255\
    \255\255\211\000\253\255\254\255\255\255\004\003\251\255\235\002\
    \005\000\254\255\255\255\077\003\100\003\138\003\252\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \047\000\046\000\045\000\037\000\036\000\042\000\040\000\039\000\
    \038\000\048\000\052\000\255\255\255\255\011\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\004\000\004\000\041\000\
    \001\000\000\000\255\255\003\000\255\255\055\000\004\000\004\000\
    \255\255\004\000\055\000\255\255\055\000\255\255\055\000\255\255\
    \055\000\255\255\016\000\255\255\017\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\033\000\255\255\255\255\
    \035\000\034\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \001\000\255\255\255\255\255\255\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\035\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\074\000\000\000\255\255\000\000\078\000\000\000\000\000\
    \000\000\082\000\000\000\000\000\000\000\086\000\000\000\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\032\000\033\000\033\000\032\000\032\000\089\000\
    \000\000\032\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\017\000\003\000\000\000\028\000\013\000\010\000\002\000\
    \025\000\024\000\014\000\016\000\019\000\015\000\021\000\031\000\
    \030\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\005\000\020\000\012\000\018\000\011\000\006\000\
    \072\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\023\000\004\000\022\000\008\000\028\000\
    \071\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\027\000\009\000\026\000\007\000\068\000\
    \063\000\064\000\061\000\060\000\059\000\058\000\055\000\057\000\
    \052\000\050\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\051\000\028\000\069\000\056\000\
    \054\000\036\000\033\000\053\000\033\000\033\000\035\000\070\000\
    \033\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\062\000\034\000\066\000\065\000\067\000\
    \075\000\033\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\076\000\000\000\000\000\000\000\
    \028\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\080\000\028\000\000\000\000\000\
    \000\000\000\000\084\000\000\000\000\000\000\000\000\000\037\000\
    \001\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\028\000\028\000\028\000\028\000\039\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\000\000\000\000\079\000\083\000\
    \028\000\033\000\028\000\028\000\028\000\028\000\039\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\028\000\028\000\028\000\039\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \038\000\028\000\028\000\000\000\000\000\000\000\255\255\028\000\
    \000\000\028\000\028\000\028\000\028\000\039\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \038\000\028\000\028\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \043\000\000\000\000\000\000\000\028\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \043\000\038\000\038\000\038\000\038\000\038\000\038\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\000\000\000\000\000\000\000\000\028\000\
    \000\000\038\000\038\000\038\000\038\000\038\000\038\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\040\000\000\000\040\000\000\000\000\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\000\000\000\000\000\000\028\000\000\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\000\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\000\000\000\000\000\000\000\000\028\000\000\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\045\000\000\000\045\000\000\000\000\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\049\000\000\000\049\000\000\000\047\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\089\000\047\000\
    \000\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\000\000\090\000\000\000\
    \000\000\000\000\000\000\090\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \090\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\
    \000\000\000\000\090\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\090\000\000\000\000\000\000\000\090\000\000\000\
    \090\000\000\000\090\000\000\000\087\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\000\000\000\000\000\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\000\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\032\000\088\000\
    \255\255\032\000\255\255\255\255\255\255\035\000\255\255\255\255\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \011\000\011\000\012\000\012\000\013\000\014\000\016\000\015\000\
    \017\000\018\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\050\000\028\000\010\000\015\000\
    \016\000\031\000\033\000\052\000\033\000\033\000\031\000\009\000\
    \000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\061\000\031\000\064\000\064\000\065\000\
    \073\000\033\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\075\000\255\255\255\255\255\255\
    \028\000\255\255\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\077\000\029\000\255\255\255\255\
    \255\255\255\255\081\000\255\255\255\255\255\255\255\255\029\000\
    \000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\035\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\077\000\081\000\
    \029\000\033\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\030\000\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\255\255\255\255\255\255\073\000\030\000\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\255\255\
    \037\000\255\255\255\255\255\255\038\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\255\255\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\077\000\081\000\255\255\255\255\255\255\255\255\
    \037\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\255\255\255\255\255\255\255\255\038\000\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\039\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\255\255\039\000\255\255\255\255\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\255\255\255\255\255\255\255\255\039\000\255\255\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\041\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\255\255\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\255\255\255\255\255\255\255\255\041\000\255\255\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\043\000\255\255\043\000\255\255\255\255\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\047\000\255\255\046\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\085\000\046\000\
    \255\255\085\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\255\255\085\000\255\255\
    \255\255\255\255\255\255\085\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\087\000\087\000\087\000\087\000\
    \087\000\087\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \085\000\255\255\255\255\255\255\255\255\255\255\085\000\255\255\
    \255\255\255\255\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\085\000\255\255\255\255\255\255\085\000\255\255\
    \085\000\255\255\085\000\255\255\085\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\091\000\091\000\
    \091\000\091\000\091\000\091\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\092\000\092\000\092\000\
    \092\000\092\000\092\000\255\255\255\255\255\255\091\000\091\000\
    \091\000\091\000\091\000\091\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\255\255\092\000\092\000\092\000\
    \092\000\092\000\092\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\093\000\093\000\093\000\093\000\093\000\
    \093\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\085\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token state lexbuf =
    __ocaml_lex_token_rec state lexbuf 0
and __ocaml_lex_token_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 58 "lexer.mll"
                        ( token state lexbuf )
# 374 "lexer.ml"

  | 1 ->
# 61 "lexer.mll"
                        ( token state lexbuf )
# 379 "lexer.ml"

  | 2 ->
# 64 "lexer.mll"
                        ( multi_line_comment state lexbuf )
# 384 "lexer.ml"

  | 3 ->
# 65 "lexer.mll"
                        ( token state lexbuf )
# 389 "lexer.ml"

  | 4 ->
let
# 68 "lexer.mll"
                       id
# 395 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "lexer.mll"
      (
        match id with
        | "break"       -> BREAK (start_pos lexbuf)
        | "do"          -> DO (start_pos lexbuf)
        | "instanceof"  -> INSTANCEOF (start_pos lexbuf)
        | "typeof"      -> TYPEOF (start_pos lexbuf)
        | "case"        -> CASE (start_pos lexbuf)
        | "else"        -> ELSE (start_pos lexbuf)
        | "new"         -> NEW (start_pos lexbuf)
        | "var"         -> VAR (start_pos lexbuf)
        | "catch"       -> CATCH (start_pos lexbuf)
        | "finally"     -> FINALLY (start_pos lexbuf)
        | "return"      -> RETURN (start_pos lexbuf)
        | "void"        -> VOID (start_pos lexbuf)
        | "continue"    -> CONTINUE (start_pos lexbuf)
        | "for"         -> FOR (start_pos lexbuf)
        | "switch"      -> SWITCH (start_pos lexbuf)
        | "while"       -> WHILE (start_pos lexbuf)
        | "debugger"    -> DEBUGGER (start_pos lexbuf)
        | "function"    -> FUNCTION (start_pos lexbuf)
        | "this"        -> THIS (start_pos lexbuf)
        | "with"        -> WITH (start_pos lexbuf)
        | "default"     -> DEFAULT (start_pos lexbuf)
        | "if"          -> IF (start_pos lexbuf)
        | "throw"       -> THROW (start_pos lexbuf)
        | "delete"      -> DELETE (start_pos lexbuf)
        | "in"          -> IN (start_pos lexbuf)
        | "try"         -> TRY (start_pos lexbuf)
        | "class"       -> CLASS (start_pos lexbuf)
        | "enum"        -> ENUM (start_pos lexbuf)
        | "extends"     -> EXTENDS (start_pos lexbuf)
        | "super"       -> SUPER (start_pos lexbuf)
        | "const"       -> CONST (start_pos lexbuf)
        | "export"      -> EXPORT (start_pos lexbuf)
        | "import"      -> IMPORT (start_pos lexbuf)
        | "implements"  -> IMPLEMENTS (start_pos lexbuf)
        | "let"         -> LET (start_pos lexbuf)
        | "private"     -> PRIVATE (start_pos lexbuf)
        | "public"      -> PUBLIC (start_pos lexbuf)
        | "interface"   -> INTERFACE (start_pos lexbuf)
        | "package"     -> PACKAGE (start_pos lexbuf)
        | "protected"   -> PROTECTED (start_pos lexbuf)
        | "static"      -> STATIC (start_pos lexbuf)
        | "yield"       -> YIELD (start_pos lexbuf)
        (* Literal *)
        | "null"        -> NULL (start_pos lexbuf)
        | "true"        -> TRUE (start_pos lexbuf)
        | "false"       -> FALSE (start_pos lexbuf)
        | "get"         -> GET (start_pos lexbuf)
        | "set"         -> SET (start_pos lexbuf)
        | _             -> IDENTIFIER (id, start_pos lexbuf)
      )
# 450 "lexer.ml"

  | 5 ->
# 123 "lexer.mll"
                ( LBRACE (start_pos lexbuf) )
# 455 "lexer.ml"

  | 6 ->
# 124 "lexer.mll"
                ( RBRACE (start_pos lexbuf) )
# 460 "lexer.ml"

  | 7 ->
# 125 "lexer.mll"
                ( LPAREN (start_pos lexbuf) )
# 465 "lexer.ml"

  | 8 ->
# 126 "lexer.mll"
                ( RPAREN (start_pos lexbuf) )
# 470 "lexer.ml"

  | 9 ->
# 127 "lexer.mll"
                ( LBRACK (start_pos lexbuf) )
# 475 "lexer.ml"

  | 10 ->
# 128 "lexer.mll"
                ( RBRACK (start_pos lexbuf) )
# 480 "lexer.ml"

  | 11 ->
# 129 "lexer.mll"
                ( DOT (start_pos lexbuf) )
# 485 "lexer.ml"

  | 12 ->
# 130 "lexer.mll"
                ( SEMI (start_pos lexbuf) )
# 490 "lexer.ml"

  | 13 ->
# 131 "lexer.mll"
                ( COMMA (start_pos lexbuf) )
# 495 "lexer.ml"

  | 14 ->
# 132 "lexer.mll"
                ( EQ3 (start_pos lexbuf) )
# 500 "lexer.ml"

  | 15 ->
# 133 "lexer.mll"
                ( NEQ3 (start_pos lexbuf) )
# 505 "lexer.ml"

  | 16 ->
# 134 "lexer.mll"
                ( EQ2 (start_pos lexbuf) )
# 510 "lexer.ml"

  | 17 ->
# 135 "lexer.mll"
                ( NEQ (start_pos lexbuf) )
# 515 "lexer.ml"

  | 18 ->
# 136 "lexer.mll"
                ( PLUS2 (start_pos lexbuf) )
# 520 "lexer.ml"

  | 19 ->
# 137 "lexer.mll"
                ( MINUS2 (start_pos lexbuf) )
# 525 "lexer.ml"

  | 20 ->
# 138 "lexer.mll"
                ( PLUS_EQ (start_pos lexbuf) )
# 530 "lexer.ml"

  | 21 ->
# 139 "lexer.mll"
                ( MINUS_EQ (start_pos lexbuf) )
# 535 "lexer.ml"

  | 22 ->
# 140 "lexer.mll"
                ( MULT_EQ (start_pos lexbuf) )
# 540 "lexer.ml"

  | 23 ->
# 141 "lexer.mll"
                ( DIV_EQ (start_pos lexbuf) )
# 545 "lexer.ml"

  | 24 ->
# 142 "lexer.mll"
                ( MOD_EQ (start_pos lexbuf) )
# 550 "lexer.ml"

  | 25 ->
# 143 "lexer.mll"
                ( LT2_EQ (start_pos lexbuf) )
# 555 "lexer.ml"

  | 26 ->
# 144 "lexer.mll"
                ( GT2_EQ (start_pos lexbuf) )
# 560 "lexer.ml"

  | 27 ->
# 145 "lexer.mll"
                ( GT3_EQ (start_pos lexbuf) )
# 565 "lexer.ml"

  | 28 ->
# 146 "lexer.mll"
                ( AND_EQ (start_pos lexbuf) )
# 570 "lexer.ml"

  | 29 ->
# 147 "lexer.mll"
                ( OR_EQ (start_pos lexbuf) )
# 575 "lexer.ml"

  | 30 ->
# 148 "lexer.mll"
                ( XOR_EQ (start_pos lexbuf) )
# 580 "lexer.ml"

  | 31 ->
# 149 "lexer.mll"
                ( LE (start_pos lexbuf) )
# 585 "lexer.ml"

  | 32 ->
# 150 "lexer.mll"
                ( GE (start_pos lexbuf) )
# 590 "lexer.ml"

  | 33 ->
# 151 "lexer.mll"
                ( LT2 (start_pos lexbuf) )
# 595 "lexer.ml"

  | 34 ->
# 152 "lexer.mll"
                ( GT3 (start_pos lexbuf) )
# 600 "lexer.ml"

  | 35 ->
# 153 "lexer.mll"
                ( GT2 (start_pos lexbuf) )
# 605 "lexer.ml"

  | 36 ->
# 154 "lexer.mll"
                ( LT (start_pos lexbuf) )
# 610 "lexer.ml"

  | 37 ->
# 155 "lexer.mll"
                ( GT (start_pos lexbuf) )
# 615 "lexer.ml"

  | 38 ->
# 156 "lexer.mll"
                ( PLUS (start_pos lexbuf) )
# 620 "lexer.ml"

  | 39 ->
# 157 "lexer.mll"
                ( MINUS (start_pos lexbuf))
# 625 "lexer.ml"

  | 40 ->
# 158 "lexer.mll"
                ( MULT (start_pos lexbuf) )
# 630 "lexer.ml"

  | 41 ->
# 159 "lexer.mll"
                ( DIV (start_pos lexbuf) )
# 635 "lexer.ml"

  | 42 ->
# 160 "lexer.mll"
                ( MOD (start_pos lexbuf) )
# 640 "lexer.ml"

  | 43 ->
# 161 "lexer.mll"
                ( AND2 (start_pos lexbuf) )
# 645 "lexer.ml"

  | 44 ->
# 162 "lexer.mll"
                ( OR2 (start_pos lexbuf) )
# 650 "lexer.ml"

  | 45 ->
# 163 "lexer.mll"
                ( AND (start_pos lexbuf) )
# 655 "lexer.ml"

  | 46 ->
# 164 "lexer.mll"
                ( OR (start_pos lexbuf) )
# 660 "lexer.ml"

  | 47 ->
# 165 "lexer.mll"
                ( XOR (start_pos lexbuf) )
# 665 "lexer.ml"

  | 48 ->
# 166 "lexer.mll"
                ( NOT (start_pos lexbuf) )
# 670 "lexer.ml"

  | 49 ->
# 167 "lexer.mll"
                ( NEG (start_pos lexbuf) )
# 675 "lexer.ml"

  | 50 ->
# 168 "lexer.mll"
                ( QUESTION (start_pos lexbuf) )
# 680 "lexer.ml"

  | 51 ->
# 169 "lexer.mll"
                ( COLON (start_pos lexbuf) )
# 685 "lexer.ml"

  | 52 ->
# 170 "lexer.mll"
                ( EQ (start_pos lexbuf) )
# 690 "lexer.ml"

  | 53 ->
# 171 "lexer.mll"
                ( DOLLER (start_pos lexbuf) )
# 695 "lexer.ml"

  | 54 ->
# 172 "lexer.mll"
                ( BS (start_pos lexbuf) )
# 700 "lexer.ml"

  | 55 ->
let
# 176 "lexer.mll"
                       dec
# 706 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 177 "lexer.mll"
      ( NUMERIC (`Dec dec, start_pos lexbuf) )
# 710 "lexer.ml"

  | 56 ->
let
# 178 "lexer.mll"
                           hex
# 716 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 179 "lexer.mll"
      ( NUMERIC (`Hex hex, start_pos lexbuf) )
# 720 "lexer.ml"

  | 57 ->
# 182 "lexer.mll"
                ( double_quoted_string state (Buffer.create 16) (start_pos lexbuf) lexbuf )
# 725 "lexer.ml"

  | 58 ->
# 183 "lexer.mll"
                ( single_quoted_string state (Buffer.create 16) (start_pos lexbuf) lexbuf )
# 730 "lexer.ml"

  | 59 ->
# 185 "lexer.mll"
                ( EOF )
# 735 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec state lexbuf __ocaml_lex_state

and multi_line_comment state lexbuf =
    __ocaml_lex_multi_line_comment_rec state lexbuf 73
and __ocaml_lex_multi_line_comment_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 188 "lexer.mll"
                ( token state lexbuf )
# 746 "lexer.ml"

  | 1 ->
# 189 "lexer.mll"
                ( multi_line_comment state lexbuf )
# 751 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_multi_line_comment_rec state lexbuf __ocaml_lex_state

and double_quoted_string state buf pos lexbuf =
    __ocaml_lex_double_quoted_string_rec state buf pos lexbuf 77
and __ocaml_lex_double_quoted_string_rec state buf pos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 192 "lexer.mll"
                ( STRING (Buffer.contents buf, pos) )
# 762 "lexer.ml"

  | 1 ->
# 193 "lexer.mll"
                ( escape_sequence state buf pos double_quoted_string lexbuf )
# 767 "lexer.ml"

  | 2 ->
let
# 195 "lexer.mll"
         c
# 773 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 195 "lexer.mll"
                ( Buffer.add_char buf c;
                  double_quoted_string state buf pos lexbuf )
# 778 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_double_quoted_string_rec state buf pos lexbuf __ocaml_lex_state

and single_quoted_string state buf pos lexbuf =
    __ocaml_lex_single_quoted_string_rec state buf pos lexbuf 81
and __ocaml_lex_single_quoted_string_rec state buf pos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 199 "lexer.mll"
                ( STRING (Buffer.contents buf, pos) )
# 789 "lexer.ml"

  | 1 ->
# 200 "lexer.mll"
                ( escape_sequence state buf pos single_quoted_string lexbuf )
# 794 "lexer.ml"

  | 2 ->
let
# 202 "lexer.mll"
         c
# 800 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 202 "lexer.mll"
                ( Buffer.add_char buf c;
                  single_quoted_string state buf pos lexbuf )
# 805 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_single_quoted_string_rec state buf pos lexbuf __ocaml_lex_state

and escape_sequence state buf pos cont lexbuf =
    __ocaml_lex_escape_sequence_rec state buf pos cont lexbuf 85
and __ocaml_lex_escape_sequence_rec state buf pos cont lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 207 "lexer.mll"
                                               c
# 817 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 208 "lexer.mll"
      ( Buffer.add_char buf c;
        cont state buf pos lexbuf )
# 822 "lexer.ml"

  | 1 ->
let
# 211 "lexer.mll"
                               lts
# 828 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 212 "lexer.mll"
      ( Buffer.add_string buf lts;
        cont state buf pos lexbuf )
# 833 "lexer.ml"

  | 2 ->
let
# 216 "lexer.mll"
                      h
# 839 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 216 "lexer.mll"
                                       l
# 844 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 217 "lexer.mll"
      ( let c = Char.chr (int_of_hex_char h * 16 + int_of_hex_char l) in
        Buffer.add_char buf c;
        cont state buf pos lexbuf )
# 850 "lexer.ml"

  | 3 ->
let
# 221 "lexer.mll"
                      u1
# 856 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 221 "lexer.mll"
                                        u2
# 861 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 221 "lexer.mll"
                                                          u3
# 866 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3)
and
# 221 "lexer.mll"
                                                                            u4
# 871 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 4) in
# 222 "lexer.mll"
      ( ignore u1; ignore u2; ignore u3; ignore u4;
        failwith "UnicodeEscapeSequence is not supported" )
# 876 "lexer.ml"

  | 4 ->
let
# 225 "lexer.mll"
         c
# 882 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 226 "lexer.mll"
      ( Buffer.add_char buf c;
        cont state buf pos lexbuf )
# 887 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_escape_sequence_rec state buf pos cont lexbuf __ocaml_lex_state

;;

